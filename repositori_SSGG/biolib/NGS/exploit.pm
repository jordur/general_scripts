#!/usr/bin/env perl
########################################################
# Copyright 2013 - Sistemas Genomicos S.L.
# @Desc: Class definition and some functions to map Illumina data using bwa
# @Author: Arbol
# @Contributors: 
########################################################

package exploit;

# -----------------------
# -- Include libraries --
# -----------------------
use warnings;
use strict;
use Data::Dumper;
use File::Path qw(make_path remove_tree);
use file_handle;
use submit;
use Exporter;

# -----------------------
# -- Global variables  --
# -----------------------
my $module = "exploit";
our @ISA = qw(Exporter);
our @EXPORT = qw ();

sub exploit {
	my ($class, $essay, $id) = @_;
	print "Launching exploitation (genes_variants) jobs for essay $essay->{name}... ".localtime()."\n";
	my $job_list;
	foreach my $experiment (keys(%{$essay->{modules}{$module}{experiments}})){
		print "INFO: experiment $experiment\n";
		# Define involved information
		my $log_dir = $essay->mkdir("logs","genes_variants",$experiment);
		my %maf = (dominant => '0.01', recessive => '0.05');
		my $annotation = $essay->add_file("trash","prepare4genesys",$essay->{name}."_GeneSys.psv");
		
		# Check consanguinity groups:
		my @groups;
		if (defined($essay->{'modules'}{$module}{'experiments'}{$experiment}{'consanguinity'})){
			@groups = keys(%{$essay->{'modules'}{$module}{'experiments'}{$experiment}{'consanguinity'}});
		} else {
			# if no consanguinity group is defined, then a dummy "samples" consanguinity group is used
			@groups = ("samples");
		}
		
		# Since different MAF values can be adopted for both the dominant and recessive mode, filtering has to be performed twice:
		my $job_list_filtering;
		my %filtering_output;
		foreach my $inheritance ("dominant","recessive"){
			# Overwrite maf if defined in config:
			if (defined($essay->{modules}{$module}{experiments}{$experiment}{'MAF'})){
				if (ref($essay->{modules}{$module}{experiments}{$experiment}{'MAF'}) eq "HASH" and defined($essay->{modules}{$module}{experiments}{$experiment}{'MAF'}{$inheritance})){
					$maf{$inheritance} = $essay->{modules}{$module}{experiments}{$experiment}{'MAF'}{$inheritance};
				} else {
					$maf{$inheritance} = $essay->{modules}{$module}{experiments}{$experiment}{'MAF'};
				}
			}
			my $maf_val = $maf{$inheritance};
			my $filtered = $essay->add_file("trash","genes_variants",$experiment,$essay->{name}."_".$experiment."_".$inheritance);
			$filtering_output{$inheritance} = $essay->add_file("trash","genes_variants",$experiment,$essay->{name}."_".$experiment."_".$inheritance."_both.psv");
			my $job_file1 = $essay->add_file("jobs","genes_variants",$experiment,"filtering_".$inheritance);
			$log_dir = $essay->mkdir("logs","genes_variants",$experiment);
			# Create involved folders
			$essay->create_tree();
			# Launch jobs
			my $string = "sg_filtering_variants.pl -c $annotation -t both -o $filtered -maf $maf_val -conseq_known -conseq_unknown -depth 7";
			my $job = launch_essay_job ($job_file1, "", $id, $string, $log_dir, $essay, $module);
			$job_list_filtering = join_jobs($job_list_filtering,[$job_file1]);
		}
		
		# Common, excluding and candidate scripts must be performed separately on each consanguinity group
		foreach my $group (@groups){
			# Define involved information
			my $affected_samples = $essay->{modules}{$module}{experiments}{$experiment}{affected};
			my $unaffected_samples = $essay->{modules}{$module}{experiments}{$experiment}{unaffected};
			my $experiment_samples = $affected_samples.",".$unaffected_samples;
			$experiment_samples =~ s/,$//;
			my $output_path = $essay->mkdir("analysis","genes_variants",$experiment,$group)."/";
			$log_dir = $essay->mkdir("logs","genes_variants",$experiment,$group);
			my $penetrance = "";
			if (defined($essay->{'modules'}{$module}{'experiments'}{$experiment}{'penetrance'})){
				$penetrance = $essay->{'modules'}{$module}{'experiments'}{$experiment}{'penetrance'};
			}

			# Common, excluding and candidate scripts must be performed separately on each consanguinity group
			# If consanguinity groups are not defined, a single group is assumed
			my $samples = $affected_samples;
			if (defined($essay->{'modules'}{$module}{'experiments'}{$experiment}{'consanguinity'})){
				$samples = $essay->{'modules'}{$module}{'experiments'}{$experiment}{'consanguinity'}{$group}{'samples'};
			}
			my @samps = split(',',$samples);
			my @affs = split(',',$affected_samples);
			$affected_samples = "";
			# Check which samples from affected list are in current consanguinity group
			foreach my $sample1 (@affs){
				foreach my $sample2 (@samps){
					if ($sample2 eq $sample1){
						$affected_samples .= $sample2 .",";
					}
				}
			}
			
			$affected_samples =~ s/,$//;
			my @unaffs = split(',',$unaffected_samples);
			$unaffected_samples = "";
			# Check which samples from unaffected list are in current consanguinity group
			foreach my $sample1 (@unaffs){
				foreach my $sample2 (@samps){
					if ($sample2 eq $sample1){
						$unaffected_samples .= $sample2 .",";
					}
				}
			}
			$unaffected_samples =~ s/,$//;
		
			# Since different MAF values can be adopted for both the dominant and recessive mode, filtering has to be performed twice:
			my $job_list_excluding;
			my %input_to_candidate;
			foreach my $inheritance ("dominant","recessive"){				
				# Files definitions
				my $both_filtered_excluding = $essay->add_file("trash","genes_variants",$experiment,$group,$essay->{name}."_".$experiment."_".$inheritance."_both_excluding.psv");
				
				# Now perform common, excluding and candidate scripts on the different groups of samples
				my $job_file2;
				
				# In case of incomplete penetrance, variants from unaffected samples are NOT removed
				if ($penetrance ne "incomplete" and $penetrance ne "unknown" and $unaffected_samples ne ""){
					$job_file2 = $essay->add_file("jobs","genes_variants",$experiment,$group,"excluding_vars_".$inheritance);
					$log_dir = $essay->mkdir("logs","genes_variants",$experiment,$group);
					my $string = "sg_excluding_vars.pl -i $filtering_output{$inheritance} -s $unaffected_samples -o $both_filtered_excluding";
					# Create involved folders
					$essay->create_tree();
					my $job = launch_essay_job ($job_file2,"",$job_list_filtering,$string,$log_dir,$essay,$module);
					$input_to_candidate{$inheritance} = $both_filtered_excluding;
					$job_list_excluding = join_jobs($job_list_excluding,[$job_file2]);
				} else {
					$job_file2 = $job_list_filtering;
					$input_to_candidate{$inheritance} = $filtering_output{$inheritance};
					$job_list_excluding = join_jobs($job_list_excluding,$job_list_filtering);
				}
			}
			$log_dir = $essay->mkdir("logs","genes_variants",$experiment,$group);
			my $string = "candidate_genes.pl -id ".$input_to_candidate{'dominant'}." -ir ".$input_to_candidate{'recessive'}." -o $output_path -p ".$experiment."_".$group."_ -s $experiment_samples -a $affected_samples -fo \"|\"";			
			my $job_file3 = $essay->add_file("jobs","genes_variants",$experiment,$group,"candidate_genes");
			# Create involved folders
			$essay->create_tree();
			my $job = launch_essay_job ($job_file3, "", $job_list_excluding, $string, $log_dir, $essay, $module);
			$job_list = join_jobs($job_list,[$job_file3]);
		}
	}
	return $job_list;
}

1;